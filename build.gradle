plugins {
    id 'java'
    id 'maven-publish'
}

group = 'plugins.nate'
version = '1.6.2'

repositories {
    mavenCentral()
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url 'https://oss.sonatype.org/content/groups/public/' }
    maven { url 'https://maven.playpro.com' }
    maven { url 'https://maven.enginehub.org/repo/' }
    maven { url "https://repo.essentialsx.net/releases" }
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation 'org.jetbrains:annotations:24.0.0'
    implementation 'com.github.Coolment-Content-Creation:SMPApi:1.0'
    compileOnly "org.spigotmc:spigot-api:1.20.1-R0.1-SNAPSHOT"
    compileOnly 'com.sk89q.worldedit:worldedit-bukkit:7.2.14'
    compileOnly 'com.sk89q.worldguard:worldguard-core:7.0.4'
    compileOnly "net.coreprotect:coreprotect:22.2"
    compileOnly "com.github.MilkBowl:VaultAPI:1.7"
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

def localProperties = new File('local.properties')
def externalOutputDir

if (localProperties.exists()) {
    def properties = new Properties()
    localProperties.withInputStream { InputStream stream ->
        properties.load(stream)
    }

    // To use this, create a local.properties file in the root directory of this project.
    // Populate it with:
    // TEST_SERVER_PLUGINS_DIRECTORY=
    // Do not surround the string in quotes. Your build will now automatically be put into the test server.
    externalOutputDir = properties.getProperty('TEST_SERVER_PLUGINS_DIRECTORY')
}

tasks.register('createExternalOutputDir') {
    doLast {
        if (externalOutputDir) {
            file(externalOutputDir).mkdirs()
        }
    }
}

// Configure the jar task
jar {
    if (externalOutputDir) {
        destinationDirectory = file(externalOutputDir)
    }

    dependsOn createExternalOutputDir
}